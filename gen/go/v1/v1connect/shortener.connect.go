// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/shortener.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/misshanya/url-shortener/gen/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// URLShortenerServiceName is the fully-qualified name of the URLShortenerService service.
	URLShortenerServiceName = "v1.URLShortenerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// URLShortenerServiceShortURLProcedure is the fully-qualified name of the URLShortenerService's
	// ShortURL RPC.
	URLShortenerServiceShortURLProcedure = "/v1.URLShortenerService/ShortURL"
)

// URLShortenerServiceClient is a client for the v1.URLShortenerService service.
type URLShortenerServiceClient interface {
	ShortURL(context.Context, *connect.Request[v1.ShortURLRequest]) (*connect.Response[v1.ShortURLResponse], error)
}

// NewURLShortenerServiceClient constructs a client for the v1.URLShortenerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewURLShortenerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) URLShortenerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	uRLShortenerServiceMethods := v1.File_v1_shortener_proto.Services().ByName("URLShortenerService").Methods()
	return &uRLShortenerServiceClient{
		shortURL: connect.NewClient[v1.ShortURLRequest, v1.ShortURLResponse](
			httpClient,
			baseURL+URLShortenerServiceShortURLProcedure,
			connect.WithSchema(uRLShortenerServiceMethods.ByName("ShortURL")),
			connect.WithClientOptions(opts...),
		),
	}
}

// uRLShortenerServiceClient implements URLShortenerServiceClient.
type uRLShortenerServiceClient struct {
	shortURL *connect.Client[v1.ShortURLRequest, v1.ShortURLResponse]
}

// ShortURL calls v1.URLShortenerService.ShortURL.
func (c *uRLShortenerServiceClient) ShortURL(ctx context.Context, req *connect.Request[v1.ShortURLRequest]) (*connect.Response[v1.ShortURLResponse], error) {
	return c.shortURL.CallUnary(ctx, req)
}

// URLShortenerServiceHandler is an implementation of the v1.URLShortenerService service.
type URLShortenerServiceHandler interface {
	ShortURL(context.Context, *connect.Request[v1.ShortURLRequest]) (*connect.Response[v1.ShortURLResponse], error)
}

// NewURLShortenerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewURLShortenerServiceHandler(svc URLShortenerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	uRLShortenerServiceMethods := v1.File_v1_shortener_proto.Services().ByName("URLShortenerService").Methods()
	uRLShortenerServiceShortURLHandler := connect.NewUnaryHandler(
		URLShortenerServiceShortURLProcedure,
		svc.ShortURL,
		connect.WithSchema(uRLShortenerServiceMethods.ByName("ShortURL")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.URLShortenerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case URLShortenerServiceShortURLProcedure:
			uRLShortenerServiceShortURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedURLShortenerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedURLShortenerServiceHandler struct{}

func (UnimplementedURLShortenerServiceHandler) ShortURL(context.Context, *connect.Request[v1.ShortURLRequest]) (*connect.Response[v1.ShortURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.URLShortenerService.ShortURL is not implemented"))
}
