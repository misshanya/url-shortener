// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package http

import (
	"context"

	"github.com/misshanya/url-shortener/gateway/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// newMockservice creates a new instance of mockservice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockservice(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockservice {
	mock := &mockservice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockservice is an autogenerated mock type for the service type
type mockservice struct {
	mock.Mock
}

type mockservice_Expecter struct {
	mock *mock.Mock
}

func (_m *mockservice) EXPECT() *mockservice_Expecter {
	return &mockservice_Expecter{mock: &_m.Mock}
}

// ShortenURL provides a mock function for the type mockservice
func (_mock *mockservice) ShortenURL(ctx context.Context, url string) (string, *models.HTTPError) {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for ShortenURL")
	}

	var r0 string
	var r1 *models.HTTPError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, *models.HTTPError)); ok {
		return returnFunc(ctx, url)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *models.HTTPError); ok {
		r1 = returnFunc(ctx, url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.HTTPError)
		}
	}
	return r0, r1
}

// mockservice_ShortenURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortenURL'
type mockservice_ShortenURL_Call struct {
	*mock.Call
}

// ShortenURL is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *mockservice_Expecter) ShortenURL(ctx interface{}, url interface{}) *mockservice_ShortenURL_Call {
	return &mockservice_ShortenURL_Call{Call: _e.mock.On("ShortenURL", ctx, url)}
}

func (_c *mockservice_ShortenURL_Call) Run(run func(ctx context.Context, url string)) *mockservice_ShortenURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockservice_ShortenURL_Call) Return(s string, hTTPError *models.HTTPError) *mockservice_ShortenURL_Call {
	_c.Call.Return(s, hTTPError)
	return _c
}

func (_c *mockservice_ShortenURL_Call) RunAndReturn(run func(ctx context.Context, url string) (string, *models.HTTPError)) *mockservice_ShortenURL_Call {
	_c.Call.Return(run)
	return _c
}

// ShortenURLBatch provides a mock function for the type mockservice
func (_mock *mockservice) ShortenURLBatch(ctx context.Context, urls []*models.Short) *models.HTTPError {
	ret := _mock.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for ShortenURLBatch")
	}

	var r0 *models.HTTPError
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*models.Short) *models.HTTPError); ok {
		r0 = returnFunc(ctx, urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HTTPError)
		}
	}
	return r0
}

// mockservice_ShortenURLBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortenURLBatch'
type mockservice_ShortenURLBatch_Call struct {
	*mock.Call
}

// ShortenURLBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - urls []*models.Short
func (_e *mockservice_Expecter) ShortenURLBatch(ctx interface{}, urls interface{}) *mockservice_ShortenURLBatch_Call {
	return &mockservice_ShortenURLBatch_Call{Call: _e.mock.On("ShortenURLBatch", ctx, urls)}
}

func (_c *mockservice_ShortenURLBatch_Call) Run(run func(ctx context.Context, urls []*models.Short)) *mockservice_ShortenURLBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*models.Short
		if args[1] != nil {
			arg1 = args[1].([]*models.Short)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockservice_ShortenURLBatch_Call) Return(hTTPError *models.HTTPError) *mockservice_ShortenURLBatch_Call {
	_c.Call.Return(hTTPError)
	return _c
}

func (_c *mockservice_ShortenURLBatch_Call) RunAndReturn(run func(ctx context.Context, urls []*models.Short) *models.HTTPError) *mockservice_ShortenURLBatch_Call {
	_c.Call.Return(run)
	return _c
}

// UnshortenURL provides a mock function for the type mockservice
func (_mock *mockservice) UnshortenURL(ctx context.Context, code string) (string, *models.HTTPError) {
	ret := _mock.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for UnshortenURL")
	}

	var r0 string
	var r1 *models.HTTPError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, *models.HTTPError)); ok {
		return returnFunc(ctx, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, code)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *models.HTTPError); ok {
		r1 = returnFunc(ctx, code)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.HTTPError)
		}
	}
	return r0, r1
}

// mockservice_UnshortenURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnshortenURL'
type mockservice_UnshortenURL_Call struct {
	*mock.Call
}

// UnshortenURL is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *mockservice_Expecter) UnshortenURL(ctx interface{}, code interface{}) *mockservice_UnshortenURL_Call {
	return &mockservice_UnshortenURL_Call{Call: _e.mock.On("UnshortenURL", ctx, code)}
}

func (_c *mockservice_UnshortenURL_Call) Run(run func(ctx context.Context, code string)) *mockservice_UnshortenURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockservice_UnshortenURL_Call) Return(s string, hTTPError *models.HTTPError) *mockservice_UnshortenURL_Call {
	_c.Call.Return(s, hTTPError)
	return _c
}

func (_c *mockservice_UnshortenURL_Call) RunAndReturn(run func(ctx context.Context, code string) (string, *models.HTTPError)) *mockservice_UnshortenURL_Call {
	_c.Call.Return(run)
	return _c
}
