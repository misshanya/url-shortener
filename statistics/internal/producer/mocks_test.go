// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package producer

import (
	"context"

	"github.com/misshanya/url-shortener/statistics/internal/models"
	"github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// newMockservice creates a new instance of mockservice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockservice(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockservice {
	mock := &mockservice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockservice is an autogenerated mock type for the service type
type mockservice struct {
	mock.Mock
}

type mockservice_Expecter struct {
	mock *mock.Mock
}

func (_m *mockservice) EXPECT() *mockservice_Expecter {
	return &mockservice_Expecter{mock: &_m.Mock}
}

// GetTopUnshortened provides a mock function for the type mockservice
func (_mock *mockservice) GetTopUnshortened(ctx context.Context, amount int, ttl int) (*models.UnshortenedTop, error) {
	ret := _mock.Called(ctx, amount, ttl)

	if len(ret) == 0 {
		panic("no return value specified for GetTopUnshortened")
	}

	var r0 *models.UnshortenedTop
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*models.UnshortenedTop, error)); ok {
		return returnFunc(ctx, amount, ttl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *models.UnshortenedTop); ok {
		r0 = returnFunc(ctx, amount, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UnshortenedTop)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, amount, ttl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockservice_GetTopUnshortened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopUnshortened'
type mockservice_GetTopUnshortened_Call struct {
	*mock.Call
}

// GetTopUnshortened is a helper method to define mock.On call
//   - ctx context.Context
//   - amount int
//   - ttl int
func (_e *mockservice_Expecter) GetTopUnshortened(ctx interface{}, amount interface{}, ttl interface{}) *mockservice_GetTopUnshortened_Call {
	return &mockservice_GetTopUnshortened_Call{Call: _e.mock.On("GetTopUnshortened", ctx, amount, ttl)}
}

func (_c *mockservice_GetTopUnshortened_Call) Run(run func(ctx context.Context, amount int, ttl int)) *mockservice_GetTopUnshortened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockservice_GetTopUnshortened_Call) Return(unshortenedTop *models.UnshortenedTop, err error) *mockservice_GetTopUnshortened_Call {
	_c.Call.Return(unshortenedTop, err)
	return _c
}

func (_c *mockservice_GetTopUnshortened_Call) RunAndReturn(run func(ctx context.Context, amount int, ttl int) (*models.UnshortenedTop, error)) *mockservice_GetTopUnshortened_Call {
	_c.Call.Return(run)
	return _c
}

// LockTopWrite provides a mock function for the type mockservice
func (_mock *mockservice) LockTopWrite(ctx context.Context, ttl int) error {
	ret := _mock.Called(ctx, ttl)

	if len(ret) == 0 {
		panic("no return value specified for LockTopWrite")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockservice_LockTopWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockTopWrite'
type mockservice_LockTopWrite_Call struct {
	*mock.Call
}

// LockTopWrite is a helper method to define mock.On call
//   - ctx context.Context
//   - ttl int
func (_e *mockservice_Expecter) LockTopWrite(ctx interface{}, ttl interface{}) *mockservice_LockTopWrite_Call {
	return &mockservice_LockTopWrite_Call{Call: _e.mock.On("LockTopWrite", ctx, ttl)}
}

func (_c *mockservice_LockTopWrite_Call) Run(run func(ctx context.Context, ttl int)) *mockservice_LockTopWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockservice_LockTopWrite_Call) Return(err error) *mockservice_LockTopWrite_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockservice_LockTopWrite_Call) RunAndReturn(run func(ctx context.Context, ttl int) error) *mockservice_LockTopWrite_Call {
	_c.Call.Return(run)
	return _c
}

// newMockkafkaWriter creates a new instance of mockkafkaWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockkafkaWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockkafkaWriter {
	mock := &mockkafkaWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockkafkaWriter is an autogenerated mock type for the kafkaWriter type
type mockkafkaWriter struct {
	mock.Mock
}

type mockkafkaWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockkafkaWriter) EXPECT() *mockkafkaWriter_Expecter {
	return &mockkafkaWriter_Expecter{mock: &_m.Mock}
}

// WriteMessages provides a mock function for the type mockkafkaWriter
func (_mock *mockkafkaWriter) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	var tmpRet mock.Arguments
	if len(msgs) > 0 {
		tmpRet = _mock.Called(ctx, msgs)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WriteMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...kafka.Message) error); ok {
		r0 = returnFunc(ctx, msgs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockkafkaWriter_WriteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteMessages'
type mockkafkaWriter_WriteMessages_Call struct {
	*mock.Call
}

// WriteMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs ...kafka.Message
func (_e *mockkafkaWriter_Expecter) WriteMessages(ctx interface{}, msgs ...interface{}) *mockkafkaWriter_WriteMessages_Call {
	return &mockkafkaWriter_WriteMessages_Call{Call: _e.mock.On("WriteMessages",
		append([]interface{}{ctx}, msgs...)...)}
}

func (_c *mockkafkaWriter_WriteMessages_Call) Run(run func(ctx context.Context, msgs ...kafka.Message)) *mockkafkaWriter_WriteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []kafka.Message
		var variadicArgs []kafka.Message
		if len(args) > 1 {
			variadicArgs = args[1].([]kafka.Message)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockkafkaWriter_WriteMessages_Call) Return(err error) *mockkafkaWriter_WriteMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockkafkaWriter_WriteMessages_Call) RunAndReturn(run func(ctx context.Context, msgs ...kafka.Message) error) *mockkafkaWriter_WriteMessages_Call {
	_c.Call.Return(run)
	return _c
}
