// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"
	"time"

	"github.com/misshanya/url-shortener/statistics/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// newMockclickHouseRepo creates a new instance of mockclickHouseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockclickHouseRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockclickHouseRepo {
	mock := &mockclickHouseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockclickHouseRepo is an autogenerated mock type for the clickHouseRepo type
type mockclickHouseRepo struct {
	mock.Mock
}

type mockclickHouseRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mockclickHouseRepo) EXPECT() *mockclickHouseRepo_Expecter {
	return &mockclickHouseRepo_Expecter{mock: &_m.Mock}
}

// GetTopUnshortened provides a mock function for the type mockclickHouseRepo
func (_mock *mockclickHouseRepo) GetTopUnshortened(ctx context.Context, amount int, ttl int) (*models.UnshortenedTop, error) {
	ret := _mock.Called(ctx, amount, ttl)

	if len(ret) == 0 {
		panic("no return value specified for GetTopUnshortened")
	}

	var r0 *models.UnshortenedTop
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*models.UnshortenedTop, error)); ok {
		return returnFunc(ctx, amount, ttl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *models.UnshortenedTop); ok {
		r0 = returnFunc(ctx, amount, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UnshortenedTop)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, amount, ttl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockclickHouseRepo_GetTopUnshortened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopUnshortened'
type mockclickHouseRepo_GetTopUnshortened_Call struct {
	*mock.Call
}

// GetTopUnshortened is a helper method to define mock.On call
//   - ctx context.Context
//   - amount int
//   - ttl int
func (_e *mockclickHouseRepo_Expecter) GetTopUnshortened(ctx interface{}, amount interface{}, ttl interface{}) *mockclickHouseRepo_GetTopUnshortened_Call {
	return &mockclickHouseRepo_GetTopUnshortened_Call{Call: _e.mock.On("GetTopUnshortened", ctx, amount, ttl)}
}

func (_c *mockclickHouseRepo_GetTopUnshortened_Call) Run(run func(ctx context.Context, amount int, ttl int)) *mockclickHouseRepo_GetTopUnshortened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockclickHouseRepo_GetTopUnshortened_Call) Return(unshortenedTop *models.UnshortenedTop, err error) *mockclickHouseRepo_GetTopUnshortened_Call {
	_c.Call.Return(unshortenedTop, err)
	return _c
}

func (_c *mockclickHouseRepo_GetTopUnshortened_Call) RunAndReturn(run func(ctx context.Context, amount int, ttl int) (*models.UnshortenedTop, error)) *mockclickHouseRepo_GetTopUnshortened_Call {
	_c.Call.Return(run)
	return _c
}

// WriteShortened provides a mock function for the type mockclickHouseRepo
func (_mock *mockclickHouseRepo) WriteShortened(ctx context.Context, events []models.ClickHouseEventShortened) error {
	ret := _mock.Called(ctx, events)

	if len(ret) == 0 {
		panic("no return value specified for WriteShortened")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.ClickHouseEventShortened) error); ok {
		r0 = returnFunc(ctx, events)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockclickHouseRepo_WriteShortened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteShortened'
type mockclickHouseRepo_WriteShortened_Call struct {
	*mock.Call
}

// WriteShortened is a helper method to define mock.On call
//   - ctx context.Context
//   - events []models.ClickHouseEventShortened
func (_e *mockclickHouseRepo_Expecter) WriteShortened(ctx interface{}, events interface{}) *mockclickHouseRepo_WriteShortened_Call {
	return &mockclickHouseRepo_WriteShortened_Call{Call: _e.mock.On("WriteShortened", ctx, events)}
}

func (_c *mockclickHouseRepo_WriteShortened_Call) Run(run func(ctx context.Context, events []models.ClickHouseEventShortened)) *mockclickHouseRepo_WriteShortened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.ClickHouseEventShortened
		if args[1] != nil {
			arg1 = args[1].([]models.ClickHouseEventShortened)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockclickHouseRepo_WriteShortened_Call) Return(err error) *mockclickHouseRepo_WriteShortened_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockclickHouseRepo_WriteShortened_Call) RunAndReturn(run func(ctx context.Context, events []models.ClickHouseEventShortened) error) *mockclickHouseRepo_WriteShortened_Call {
	_c.Call.Return(run)
	return _c
}

// WriteUnshortened provides a mock function for the type mockclickHouseRepo
func (_mock *mockclickHouseRepo) WriteUnshortened(ctx context.Context, events []models.ClickHouseEventUnshortened) error {
	ret := _mock.Called(ctx, events)

	if len(ret) == 0 {
		panic("no return value specified for WriteUnshortened")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.ClickHouseEventUnshortened) error); ok {
		r0 = returnFunc(ctx, events)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockclickHouseRepo_WriteUnshortened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteUnshortened'
type mockclickHouseRepo_WriteUnshortened_Call struct {
	*mock.Call
}

// WriteUnshortened is a helper method to define mock.On call
//   - ctx context.Context
//   - events []models.ClickHouseEventUnshortened
func (_e *mockclickHouseRepo_Expecter) WriteUnshortened(ctx interface{}, events interface{}) *mockclickHouseRepo_WriteUnshortened_Call {
	return &mockclickHouseRepo_WriteUnshortened_Call{Call: _e.mock.On("WriteUnshortened", ctx, events)}
}

func (_c *mockclickHouseRepo_WriteUnshortened_Call) Run(run func(ctx context.Context, events []models.ClickHouseEventUnshortened)) *mockclickHouseRepo_WriteUnshortened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.ClickHouseEventUnshortened
		if args[1] != nil {
			arg1 = args[1].([]models.ClickHouseEventUnshortened)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockclickHouseRepo_WriteUnshortened_Call) Return(err error) *mockclickHouseRepo_WriteUnshortened_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockclickHouseRepo_WriteUnshortened_Call) RunAndReturn(run func(ctx context.Context, events []models.ClickHouseEventUnshortened) error) *mockclickHouseRepo_WriteUnshortened_Call {
	_c.Call.Return(run)
	return _c
}

// newMockmetricsProvider creates a new instance of mockmetricsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockmetricsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockmetricsProvider {
	mock := &mockmetricsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockmetricsProvider is an autogenerated mock type for the metricsProvider type
type mockmetricsProvider struct {
	mock.Mock
}

type mockmetricsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockmetricsProvider) EXPECT() *mockmetricsProvider_Expecter {
	return &mockmetricsProvider_Expecter{mock: &_m.Mock}
}

// Shorten provides a mock function for the type mockmetricsProvider
func (_mock *mockmetricsProvider) Shorten() {
	_mock.Called()
	return
}

// mockmetricsProvider_Shorten_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shorten'
type mockmetricsProvider_Shorten_Call struct {
	*mock.Call
}

// Shorten is a helper method to define mock.On call
func (_e *mockmetricsProvider_Expecter) Shorten() *mockmetricsProvider_Shorten_Call {
	return &mockmetricsProvider_Shorten_Call{Call: _e.mock.On("Shorten")}
}

func (_c *mockmetricsProvider_Shorten_Call) Run(run func()) *mockmetricsProvider_Shorten_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockmetricsProvider_Shorten_Call) Return() *mockmetricsProvider_Shorten_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockmetricsProvider_Shorten_Call) RunAndReturn(run func()) *mockmetricsProvider_Shorten_Call {
	_c.Run(run)
	return _c
}

// Unshorten provides a mock function for the type mockmetricsProvider
func (_mock *mockmetricsProvider) Unshorten() {
	_mock.Called()
	return
}

// mockmetricsProvider_Unshorten_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unshorten'
type mockmetricsProvider_Unshorten_Call struct {
	*mock.Call
}

// Unshorten is a helper method to define mock.On call
func (_e *mockmetricsProvider_Expecter) Unshorten() *mockmetricsProvider_Unshorten_Call {
	return &mockmetricsProvider_Unshorten_Call{Call: _e.mock.On("Unshorten")}
}

func (_c *mockmetricsProvider_Unshorten_Call) Run(run func()) *mockmetricsProvider_Unshorten_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockmetricsProvider_Unshorten_Call) Return() *mockmetricsProvider_Unshorten_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockmetricsProvider_Unshorten_Call) RunAndReturn(run func()) *mockmetricsProvider_Unshorten_Call {
	_c.Run(run)
	return _c
}

// newMocktopLockProvider creates a new instance of mocktopLockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocktopLockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocktopLockProvider {
	mock := &mocktopLockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocktopLockProvider is an autogenerated mock type for the topLockProvider type
type mocktopLockProvider struct {
	mock.Mock
}

type mocktopLockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mocktopLockProvider) EXPECT() *mocktopLockProvider_Expecter {
	return &mocktopLockProvider_Expecter{mock: &_m.Mock}
}

// Lock provides a mock function for the type mocktopLockProvider
func (_mock *mocktopLockProvider) Lock(ctx context.Context, ttl time.Duration) error {
	ret := _mock.Called(ctx, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = returnFunc(ctx, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mocktopLockProvider_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type mocktopLockProvider_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - ctx context.Context
//   - ttl time.Duration
func (_e *mocktopLockProvider_Expecter) Lock(ctx interface{}, ttl interface{}) *mocktopLockProvider_Lock_Call {
	return &mocktopLockProvider_Lock_Call{Call: _e.mock.On("Lock", ctx, ttl)}
}

func (_c *mocktopLockProvider_Lock_Call) Run(run func(ctx context.Context, ttl time.Duration)) *mocktopLockProvider_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mocktopLockProvider_Lock_Call) Return(err error) *mocktopLockProvider_Lock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mocktopLockProvider_Lock_Call) RunAndReturn(run func(ctx context.Context, ttl time.Duration) error) *mocktopLockProvider_Lock_Call {
	_c.Call.Return(run)
	return _c
}
