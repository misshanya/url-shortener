// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grpc

import (
	"context"

	"github.com/misshanya/url-shortener/shortener/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// newMockservice creates a new instance of mockservice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockservice(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockservice {
	mock := &mockservice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockservice is an autogenerated mock type for the service type
type mockservice struct {
	mock.Mock
}

type mockservice_Expecter struct {
	mock *mock.Mock
}

func (_m *mockservice) EXPECT() *mockservice_Expecter {
	return &mockservice_Expecter{mock: &_m.Mock}
}

// GetURL provides a mock function for the type mockservice
func (_mock *mockservice) GetURL(ctx context.Context, short string) (string, error) {
	ret := _mock.Called(ctx, short)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, short)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, short)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, short)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockservice_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type mockservice_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - ctx context.Context
//   - short string
func (_e *mockservice_Expecter) GetURL(ctx interface{}, short interface{}) *mockservice_GetURL_Call {
	return &mockservice_GetURL_Call{Call: _e.mock.On("GetURL", ctx, short)}
}

func (_c *mockservice_GetURL_Call) Run(run func(ctx context.Context, short string)) *mockservice_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockservice_GetURL_Call) Return(s string, err error) *mockservice_GetURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mockservice_GetURL_Call) RunAndReturn(run func(ctx context.Context, short string) (string, error)) *mockservice_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// ShortenURL provides a mock function for the type mockservice
func (_mock *mockservice) ShortenURL(ctx context.Context, short *models.Short) error {
	ret := _mock.Called(ctx, short)

	if len(ret) == 0 {
		panic("no return value specified for ShortenURL")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Short) error); ok {
		r0 = returnFunc(ctx, short)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockservice_ShortenURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortenURL'
type mockservice_ShortenURL_Call struct {
	*mock.Call
}

// ShortenURL is a helper method to define mock.On call
//   - ctx context.Context
//   - short *models.Short
func (_e *mockservice_Expecter) ShortenURL(ctx interface{}, short interface{}) *mockservice_ShortenURL_Call {
	return &mockservice_ShortenURL_Call{Call: _e.mock.On("ShortenURL", ctx, short)}
}

func (_c *mockservice_ShortenURL_Call) Run(run func(ctx context.Context, short *models.Short)) *mockservice_ShortenURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Short
		if args[1] != nil {
			arg1 = args[1].(*models.Short)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockservice_ShortenURL_Call) Return(err error) *mockservice_ShortenURL_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockservice_ShortenURL_Call) RunAndReturn(run func(ctx context.Context, short *models.Short) error) *mockservice_ShortenURL_Call {
	_c.Call.Return(run)
	return _c
}

// ShortenURLBatch provides a mock function for the type mockservice
func (_mock *mockservice) ShortenURLBatch(ctx context.Context, shorts []*models.Short) {
	_mock.Called(ctx, shorts)
	return
}

// mockservice_ShortenURLBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortenURLBatch'
type mockservice_ShortenURLBatch_Call struct {
	*mock.Call
}

// ShortenURLBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - shorts []*models.Short
func (_e *mockservice_Expecter) ShortenURLBatch(ctx interface{}, shorts interface{}) *mockservice_ShortenURLBatch_Call {
	return &mockservice_ShortenURLBatch_Call{Call: _e.mock.On("ShortenURLBatch", ctx, shorts)}
}

func (_c *mockservice_ShortenURLBatch_Call) Run(run func(ctx context.Context, shorts []*models.Short)) *mockservice_ShortenURLBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*models.Short
		if args[1] != nil {
			arg1 = args[1].([]*models.Short)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockservice_ShortenURLBatch_Call) Return() *mockservice_ShortenURLBatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockservice_ShortenURLBatch_Call) RunAndReturn(run func(ctx context.Context, shorts []*models.Short)) *mockservice_ShortenURLBatch_Call {
	_c.Run(run)
	return _c
}
