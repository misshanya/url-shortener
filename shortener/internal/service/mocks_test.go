// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"
	"time"

	"github.com/misshanya/url-shortener/shortener/internal/models"
	"github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// newMockpostgresRepo creates a new instance of mockpostgresRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockpostgresRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockpostgresRepo {
	mock := &mockpostgresRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockpostgresRepo is an autogenerated mock type for the postgresRepo type
type mockpostgresRepo struct {
	mock.Mock
}

type mockpostgresRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mockpostgresRepo) EXPECT() *mockpostgresRepo_Expecter {
	return &mockpostgresRepo_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function for the type mockpostgresRepo
func (_mock *mockpostgresRepo) GetID(ctx context.Context, url string) (int64, error) {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, url)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, url)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockpostgresRepo_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type mockpostgresRepo_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *mockpostgresRepo_Expecter) GetID(ctx interface{}, url interface{}) *mockpostgresRepo_GetID_Call {
	return &mockpostgresRepo_GetID_Call{Call: _e.mock.On("GetID", ctx, url)}
}

func (_c *mockpostgresRepo_GetID_Call) Run(run func(ctx context.Context, url string)) *mockpostgresRepo_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockpostgresRepo_GetID_Call) Return(n int64, err error) *mockpostgresRepo_GetID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mockpostgresRepo_GetID_Call) RunAndReturn(run func(ctx context.Context, url string) (int64, error)) *mockpostgresRepo_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function for the type mockpostgresRepo
func (_mock *mockpostgresRepo) GetURL(ctx context.Context, id int64) (string, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockpostgresRepo_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type mockpostgresRepo_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *mockpostgresRepo_Expecter) GetURL(ctx interface{}, id interface{}) *mockpostgresRepo_GetURL_Call {
	return &mockpostgresRepo_GetURL_Call{Call: _e.mock.On("GetURL", ctx, id)}
}

func (_c *mockpostgresRepo_GetURL_Call) Run(run func(ctx context.Context, id int64)) *mockpostgresRepo_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockpostgresRepo_GetURL_Call) Return(s string, err error) *mockpostgresRepo_GetURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mockpostgresRepo_GetURL_Call) RunAndReturn(run func(ctx context.Context, id int64) (string, error)) *mockpostgresRepo_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// StoreURL provides a mock function for the type mockpostgresRepo
func (_mock *mockpostgresRepo) StoreURL(ctx context.Context, url string) (int64, error) {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for StoreURL")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, url)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, url)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockpostgresRepo_StoreURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreURL'
type mockpostgresRepo_StoreURL_Call struct {
	*mock.Call
}

// StoreURL is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *mockpostgresRepo_Expecter) StoreURL(ctx interface{}, url interface{}) *mockpostgresRepo_StoreURL_Call {
	return &mockpostgresRepo_StoreURL_Call{Call: _e.mock.On("StoreURL", ctx, url)}
}

func (_c *mockpostgresRepo_StoreURL_Call) Run(run func(ctx context.Context, url string)) *mockpostgresRepo_StoreURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockpostgresRepo_StoreURL_Call) Return(n int64, err error) *mockpostgresRepo_StoreURL_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mockpostgresRepo_StoreURL_Call) RunAndReturn(run func(ctx context.Context, url string) (int64, error)) *mockpostgresRepo_StoreURL_Call {
	_c.Call.Return(run)
	return _c
}

// newMockvalkeyRepo creates a new instance of mockvalkeyRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockvalkeyRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockvalkeyRepo {
	mock := &mockvalkeyRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockvalkeyRepo is an autogenerated mock type for the valkeyRepo type
type mockvalkeyRepo struct {
	mock.Mock
}

type mockvalkeyRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mockvalkeyRepo) EXPECT() *mockvalkeyRepo_Expecter {
	return &mockvalkeyRepo_Expecter{mock: &_m.Mock}
}

// GetURLByCode provides a mock function for the type mockvalkeyRepo
func (_mock *mockvalkeyRepo) GetURLByCode(ctx context.Context, code string) (string, error) {
	ret := _mock.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByCode")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, code)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockvalkeyRepo_GetURLByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURLByCode'
type mockvalkeyRepo_GetURLByCode_Call struct {
	*mock.Call
}

// GetURLByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *mockvalkeyRepo_Expecter) GetURLByCode(ctx interface{}, code interface{}) *mockvalkeyRepo_GetURLByCode_Call {
	return &mockvalkeyRepo_GetURLByCode_Call{Call: _e.mock.On("GetURLByCode", ctx, code)}
}

func (_c *mockvalkeyRepo_GetURLByCode_Call) Run(run func(ctx context.Context, code string)) *mockvalkeyRepo_GetURLByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockvalkeyRepo_GetURLByCode_Call) Return(s string, err error) *mockvalkeyRepo_GetURLByCode_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mockvalkeyRepo_GetURLByCode_Call) RunAndReturn(run func(ctx context.Context, code string) (string, error)) *mockvalkeyRepo_GetURLByCode_Call {
	_c.Call.Return(run)
	return _c
}

// SetTop provides a mock function for the type mockvalkeyRepo
func (_mock *mockvalkeyRepo) SetTop(ctx context.Context, top models.UnshortenedTop, ttl time.Duration) error {
	ret := _mock.Called(ctx, top, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetTop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.UnshortenedTop, time.Duration) error); ok {
		r0 = returnFunc(ctx, top, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockvalkeyRepo_SetTop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTop'
type mockvalkeyRepo_SetTop_Call struct {
	*mock.Call
}

// SetTop is a helper method to define mock.On call
//   - ctx context.Context
//   - top models.UnshortenedTop
//   - ttl time.Duration
func (_e *mockvalkeyRepo_Expecter) SetTop(ctx interface{}, top interface{}, ttl interface{}) *mockvalkeyRepo_SetTop_Call {
	return &mockvalkeyRepo_SetTop_Call{Call: _e.mock.On("SetTop", ctx, top, ttl)}
}

func (_c *mockvalkeyRepo_SetTop_Call) Run(run func(ctx context.Context, top models.UnshortenedTop, ttl time.Duration)) *mockvalkeyRepo_SetTop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.UnshortenedTop
		if args[1] != nil {
			arg1 = args[1].(models.UnshortenedTop)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockvalkeyRepo_SetTop_Call) Return(err error) *mockvalkeyRepo_SetTop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockvalkeyRepo_SetTop_Call) RunAndReturn(run func(ctx context.Context, top models.UnshortenedTop, ttl time.Duration) error) *mockvalkeyRepo_SetTop_Call {
	_c.Call.Return(run)
	return _c
}

// newMockkafkaWriter creates a new instance of mockkafkaWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockkafkaWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockkafkaWriter {
	mock := &mockkafkaWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockkafkaWriter is an autogenerated mock type for the kafkaWriter type
type mockkafkaWriter struct {
	mock.Mock
}

type mockkafkaWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockkafkaWriter) EXPECT() *mockkafkaWriter_Expecter {
	return &mockkafkaWriter_Expecter{mock: &_m.Mock}
}

// WriteMessages provides a mock function for the type mockkafkaWriter
func (_mock *mockkafkaWriter) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	var tmpRet mock.Arguments
	if len(msgs) > 0 {
		tmpRet = _mock.Called(ctx, msgs)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WriteMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...kafka.Message) error); ok {
		r0 = returnFunc(ctx, msgs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockkafkaWriter_WriteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteMessages'
type mockkafkaWriter_WriteMessages_Call struct {
	*mock.Call
}

// WriteMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs ...kafka.Message
func (_e *mockkafkaWriter_Expecter) WriteMessages(ctx interface{}, msgs ...interface{}) *mockkafkaWriter_WriteMessages_Call {
	return &mockkafkaWriter_WriteMessages_Call{Call: _e.mock.On("WriteMessages",
		append([]interface{}{ctx}, msgs...)...)}
}

func (_c *mockkafkaWriter_WriteMessages_Call) Run(run func(ctx context.Context, msgs ...kafka.Message)) *mockkafkaWriter_WriteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []kafka.Message
		var variadicArgs []kafka.Message
		if len(args) > 1 {
			variadicArgs = args[1].([]kafka.Message)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockkafkaWriter_WriteMessages_Call) Return(err error) *mockkafkaWriter_WriteMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockkafkaWriter_WriteMessages_Call) RunAndReturn(run func(ctx context.Context, msgs ...kafka.Message) error) *mockkafkaWriter_WriteMessages_Call {
	_c.Call.Return(run)
	return _c
}
